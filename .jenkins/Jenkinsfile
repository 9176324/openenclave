def PowerShellWrapper(psCmd) {
    psCmd = psCmd.replaceAll("\r", "").replaceAll("\n", "")
    bat "powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \"\$ErrorActionPreference='Stop';[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;$psCmd;EXIT \$global:LastExitCode\""
}

def ACCTest(String label, String compiler, String platform_mode, String build_type) {
    def c_compiler
    def cpp_compiler
    stage("$label ${compiler} ${platform_mode} ${build_type}") {
        node("$label") {
            cleanWs()
            checkout scm

            timeout(15) {
                dir('build') {
                    if (compiler == "gcc") {
                        c_compiler = "gcc"
                        cpp_compiler = "g++"
                    } else if (compiler == "clang-7") {
                        c_compiler = "clang-7"
                        cpp_compiler = "clang++-7"
                    }
                    withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}"]) {
                        sh """
                        cmake .. -DCMAKE_BUILD_TYPE=${build_type}
                        make
                        ctest --output-on-failure
                        """
                    }
                }
            }

        }
    }
}

def simulationTest(String version, String compiler, String platform_mode, String build_type ) {
    def c_compiler
    def cpp_compiler
    stage("Sim Ubuntu${version} ${compiler} ${platform_mode} ${build_type}") {
        node {
            cleanWs()
            checkout scm

            def oetoolsSim = docker.build("oetools-simulation-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsSim.inside {
                timeout(15) {
                    dir('build') {
                        if (compiler == "gcc") {
                            c_compiler = "gcc"
                            cpp_compiler = "g++"
                        } else if (compiler == "clang-7") {
                            c_compiler = "clang-7"
                            cpp_compiler = "clang++-7"
                        }
                        withEnv(["CC=${c_compiler}","CXX=${cpp_compiler}","OE_SIMULATION=1"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=${build_type} -DUSE_LIBSGX=OFF
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def ACCContainerTest(String label, String version) {
    stage("${label} Container RelWithDebInfo") {
        node("${label}") {
            cleanWs()
            checkout scm

            def oetoolsContainer = docker.build("oetools-containertest-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsContainer.inside('--device /dev/sgx:/dev/sgx') {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
                            make
                            ctest --output-on-failure
                            """
                        }
                    }
                }
            }
        }
    }
}

def checkDevFlows(String version) {
    stage('Check dev flows') {
        node {
            cleanWs()
            checkout scm

            def oetoolsCheck = docker.build("oetools-check-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsCheck.inside {
                timeout(2) {
                    sh './scripts/check-ci'
                }
            }
        }
    }
    stage('Default compiler') {
        // This stage verifies developer flows after running ansible playbooks to bootstrap a machine.
        node {
            cleanWs()
            checkout scm

            def buildImage = docker.build("oetools-base-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile.scripts .")

            buildImage.inside {
                timeout(15) {
                    // This is run to test that it works with the dependencies
                    // installed by our install-prereqs ansible playbook.

                    dir('build') {
                        sh '''
                        cmake .. -DUSE_LIBSGX=OFF
                        make
                    '''
                        // Note that `make package` is not expected to work
                        // without extra configuration.
                    }
                }
            }
        }
    }
}

def win2016CrossPlatform(String version, String build_type) {
    stage("Linux SGX1 ${build_type}") {
        node {
            cleanWs()
            checkout scm
            def oetoolsWincp = docker.build("oetools-wincp-${version}", "--build-arg ubuntu_version=${version} -f .jenkins/Dockerfile .")
            oetoolsWincp.inside {
                timeout(15) {
                    dir('build') {
                        withEnv(["CC=clang-7","CXX=clang++-7"]) {
                            sh """
                            cmake .. -DCMAKE_BUILD_TYPE=Debug -DUSE_DEBUG_MALLOC=OFF
                            make
                            """
                        }
                    }
                    stash includes: 'build/tests/**', name: "linux${build_type}${version}"
                }
            }
        }
    }
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            unstash "linux${build_type}${version}"
            PowerShellWrapper('mv build linuxbin')
            PowerShellWrapper("./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $WORKSPACE/linuxbin/tests -build_type ${build_type}")
       }
    }
}

def win2016Test(String build_type) {
    stage("Windows ${build_type}") {
        node('SGXFLC-Windows') {
            cleanWs()
            checkout scm
            PowerShellWrapper("./scripts/test-build-config.ps1 -add_windows_enclave_tests -linux_bin_dir $WORKSPACE/linuxbin/tests -build_type ${build_type} -build_enclaves")
       }
    }
}

parallel "Check Developer Experience Ubuntu 16.04" :   { checkDevFlows('16.04') },
         "Check Developer Experience Ubuntu 18.04" :   { checkDevFlows('18.04') },
         "ACC1604 clang-7 Debug" :                     { ACCTest('ACC-1604', 'clang-7', 'SGX1FLC', 'Debug') },
         "ACC1604 clang-7 Release" :                   { ACCTest('ACC-1604', 'clang-7', 'SGX1FLC', 'Release') },
         "ACC1604 clang-7 RelWithDebInfo" :            { ACCTest('ACC-1604', 'clang-7', 'SGX1FLC', 'RelWithDebinfo') },
         "ACC1604 gcc Debug" :                         { ACCTest('ACC-1604', 'gcc', 'SGX1FLC', 'Debug') },
         "ACC1604 gcc Release" :                       { ACCTest('ACC-1604', 'gcc', 'SGX1FLC', 'Release') },
         "ACC1604 gcc RelWithDebInfo" :                { ACCTest('ACC-1604', 'gcc', 'SGX1FLC', 'RelWithDebInfo') },
         "ACC1604 Container RelWithDebInfo" :          { ACCContainerTest('ACC-1604', '16.04') },
         "ACC1804 clang-7 Debug" :                     { ACCTest('ACC-1804', 'clang-7', 'SGX1FLC', 'Debug') },
         "ACC1804 clang-7 Release" :                   { ACCTest('ACC-1804', 'clang-7', 'SGX1FLC', 'Release') },
         "ACC1804 clang-7 RelWithDebInfo" :            { ACCTest('ACC-1804', 'clang-7', 'SGX1FLC', 'RelWithDebinfo') },
         "ACC1804 gcc Debug" :                         { ACCTest('ACC-1804', 'gcc', 'SGX1FLC', 'Debug') },
         "ACC1804 gcc Release" :                       { ACCTest('ACC-1804', 'gcc', 'SGX1FLC', 'Release') },
         "ACC1804 gcc RelWithDebInfo" :                { ACCTest('ACC-1804', 'gcc', 'SGX1FLC', 'RelWithDebInfo') },
         "ACC1804 Container RelWithDebInfo" :          { ACCContainerTest('ACC-1804', '18.04') },
         "Sim 1604 clang-7 SGX1 Debug" :               { simulationTest('16.04', 'clang-7', 'SGX1', 'Debug')},
         "Sim 1604 clang-7 SGX1 Release" :             { simulationTest('16.04', 'clang-7', 'SGX1', 'Release')},
         "Sim 1604 clang-7 SGX1 RelWithDebInfo" :      { simulationTest('16.04', 'clang-7', 'SGX1', 'RelWithDebInfo')},
         "Sim 1604 clang-7 SGX1-FLC Debug" :           { simulationTest('16.04', 'clang-7', 'SGX1FLC', 'Debug')},
         "Sim 1604 clang-7 SGX1-FLC Release" :         { simulationTest('16.04', 'clang-7', 'SGX1FLC', 'Release')},
         "Sim 1604 clang-7 SGX1-FLC RelWithDebInfo" :  { simulationTest('16.04', 'clang-7', 'SGX1FLC', 'RelWithDebInfo')},
         "Sim 1804 clang-7 SGX1 Debug" :               { simulationTest('18.04', 'clang-7', 'SGX1', 'Debug')},
         "Sim 1804 clang-7 SGX1 Release" :             { simulationTest('18.04', 'clang-7', 'SGX1', 'Release')},
         "Sim 1804 clang-7 SGX1 RelWithDebInfo" :      { simulationTest('18.04', 'clang-7', 'SGX1', 'RelWithDebInfo')},
         "Sim 1804 clang-7 SGX1-FLC Debug" :           { simulationTest('18.04', 'clang-7', 'SGX1FLC', 'Debug')},
         "Sim 1804 clang-7 SGX1-FLC Release" :         { simulationTest('18.04', 'clang-7', 'SGX1FLC', 'Release')},
         "Sim 1804 clang-7 SGX1-FLC RelWithDebInfo" :  { simulationTest('18.04', 'clang-7', 'SGX1FLC', 'RelWithDebInfo')},
         "Win2016 Ubuntu1604 Debug Cross-platform" :   { win2016CrossPlatform('16.04', 'Debug') },
         "Win2016 Ubuntu1604 Release Cross-platform" : { win2016CrossPlatform('16.04', 'Release') },
         "Win2016 Ubuntu1804 Debug Cross-platform" :   { win2016CrossPlatform('18.04', 'Debug') },
         "Win2016 Ubuntu1804 Release Cross-platform" : { win2016CrossPlatform('18.04', 'Release') },
         "Win2016 Debug" :                             { win2016Test('Debug') },
         "Win2016 Release" :                           { win2016Test('Release') }
