doxygen
{
    xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance
    xsi:noNamespaceSchemaLocation=compound.xsd
    version=1.8.11
    compounddef
    {
        id=host_8h
        kind=file
        language=C++
        compoundname
        {
            chars="host.h"
        }
        includes
        {
            local=no
            chars="stddef.h"
        }
        includes
        {
            local=no
            chars="string.h"
        }
        includes
        {
            local=no
            chars="stdlib.h"
        }
        includes
        {
            local=no
            chars="stdio.h"
        }
        includes
        {
            local=no
            chars="stdint.h"
        }
        includes
        {
            local=no
            chars="stdarg.h"
        }
        includes
        {
            local=yes
            chars="defs.h"
        }
        includes
        {
            local=yes
            chars="types.h"
        }
        includes
        {
            refid=result_8h
            local=yes
            chars="result.h"
        }
        includes
        {
            refid=thread_8h
            local=yes
            chars="thread.h"
        }
        includes
        {
            local=yes
            chars="bits/sha.h"
        }
        incdepgraph
        {
            node
            {
                id=23
                label
                {
                    chars="stdarg.h"
                }
            }
            node
            {
                id=26
                label
                {
                    chars="result.h"
                }
                link
                {
                    refid=result_8h
                }
                childnode
                {
                    refid=24
                    relation=include
                }
            }
            node
            {
                id=27
                label
                {
                    chars="thread.h"
                }
                link
                {
                    refid=thread_8h
                }
                childnode
                {
                    refid=24
                    relation=include
                }
                childnode
                {
                    refid=25
                    relation=include
                }
            }
            node
            {
                id=22
                label
                {
                    chars="stdint.h"
                }
            }
            node
            {
                id=20
                label
                {
                    chars="stdlib.h"
                }
            }
            node
            {
                id=18
                label
                {
                    chars="stddef.h"
                }
            }
            node
            {
                id=24
                label
                {
                    chars="defs.h"
                }
            }
            node
            {
                id=19
                label
                {
                    chars="string.h"
                }
            }
            node
            {
                id=17
                label
                {
                    chars="/root/openenclave/include/openenclave/host.h"
                }
                link
                {
                    refid=host.h
                }
                childnode
                {
                    refid=18
                    relation=include
                }
                childnode
                {
                    refid=19
                    relation=include
                }
                childnode
                {
                    refid=20
                    relation=include
                }
                childnode
                {
                    refid=21
                    relation=include
                }
                childnode
                {
                    refid=22
                    relation=include
                }
                childnode
                {
                    refid=23
                    relation=include
                }
                childnode
                {
                    refid=24
                    relation=include
                }
                childnode
                {
                    refid=25
                    relation=include
                }
                childnode
                {
                    refid=26
                    relation=include
                }
                childnode
                {
                    refid=27
                    relation=include
                }
                childnode
                {
                    refid=28
                    relation=include
                }
            }
            node
            {
                id=28
                label
                {
                    chars="bits/sha.h"
                }
            }
            node
            {
                id=25
                label
                {
                    chars="types.h"
                }
            }
            node
            {
                id=21
                label
                {
                    chars="stdio.h"
                }
            }
        }
        sectiondef
        {
            kind=define
            memberdef
            {
                kind=define
                id=host_8h_1a5b8a2a631f1edb2cb704d14c01f480f7
                prot=public
                static=no
                name
                {
                    chars="OE_OCALL"
                }
                initializer
                {
                    chars="OE_EXPORT"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=27
                    column=11
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=27
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1ae11fc3e4caf14309146f5b57525e6fb8
                prot=public
                static=no
                name
                {
                    chars="OE_FLAG_DEBUG"
                }
                initializer
                {
                    chars="1"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=32
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=32
                    bodyend=-1
                }
            }
            memberdef
            {
                kind=define
                id=host_8h_1a1d106bb88691ea81854039064314c281
                prot=public
                static=no
                name
                {
                    chars="OE_FLAG_SIMULATE"
                }
                initializer
                {
                    chars="2"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=33
                    column=9
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=33
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=typedef
            memberdef
            {
                kind=typedef
                id=host_8h_1a80a03dd519e9bc099de34c6ae2fdd033
                prot=public
                static=no
                type
                {
                    chars="struct _OE_Enclave"
                }
                definition
                {
                    chars="typedef struct _OE_Enclave OE_Enclave"
                }
                argsstring
                {
                }
                name
                {
                    chars="OE_Enclave"
                }
                briefdescription
                {
                }
                detaileddescription
                {
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=22
                    column=1
                    bodyfile=/root/openenclave/include/openenclave/host.h
                    bodystart=30
                    bodyend=-1
                }
            }
        }
        sectiondef
        {
            kind=func
            memberdef
            {
                kind=function
                id=host_8h_a598cc1d7a051a13f5ff4ba6160ccbd82_1a598cc1d7a051a13f5ff4ba6160ccbd82
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_CreateEnclave"
                }
                argsstring
                {
                    chars="(const char *path, uint32_t flags, OE_Enclave **enclave)"
                }
                name
                {
                    chars="OE_CreateEnclave"
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="path"
                    }
                }
                param
                {
                    type
                    {
                        chars="uint32_t"
                    }
                    declname
                    {
                        chars="flags"
                    }
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave **"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Creates an enclave from an enclave image file."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        itemizedlist
                        {
                            listitem
                            {
                                para
                                {
                                    chars="Loads an enclave image file"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Maps the enclave memory image onto the driver device (/dev/isgx)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Lays out the enclave memory image and injects metadata"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to create the enclave (ECREATE)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to add the pages to the EPC (EADD/EEXTEND)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the Intel(R) launch enclave (LE) for a launch token (EINITKEY)"
                                }
                            }
                            listitem
                            {
                                para
                                {
                                    chars="Asks the driver to initialize the enclave with the token (EINIT)"
                                }
                            }
                        }
                        chars="This function creates an enclave from an enclave image file. While creating the enclave, this function interacts with the Intel(R) SGX drviver and the Intel(R) AESM service. Enclave creation peforms the following steps."
                    }
                    para
                    {
                        chars="Once these steps have been performed, the enclave is ready to use."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="path"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="oeenclave"
                                        }
                                        bold
                                        {
                                            chars="oesign"
                                        }
                                        chars="The path of an enclave image file in ELF-64 format. This file must have been linked with the  library and signed by the  tool."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="flags"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        itemizedlist
                                        {
                                            listitem
                                            {
                                                para
                                                {
                                                    chars="OE_FLAG_DEBUG - runs the enclave in debug mode"
                                                }
                                            }
                                            listitem
                                            {
                                                para
                                                {
                                                    chars="OE_FLAG_SIMULATION - runs the enclave in simulation mode"
                                                }
                                            }
                                        }
                                        chars="These flags control how the enclave is run."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="enclave"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="This points to the enclave instance upon succeess."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns OE_OK on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=64
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_a20654d7b450c042ac7b256893b287cbe_1a20654d7b450c042ac7b256893b287cbe
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_TerminateEnclave"
                }
                argsstring
                {
                    chars="(OE_Enclave *enclave)"
                }
                name
                {
                    chars="OE_TerminateEnclave"
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave *"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Terminates an enclave and reclaims its resources."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            ref
                            {
                                refid=host_8h_a598cc1d7a051a13f5ff4ba6160ccbd82_1a598cc1d7a051a13f5ff4ba6160ccbd82
                                kindref=member
                                chars="OE_CreateEnclave()"
                            }
                        }
                        chars="This function terminates an enclave and reclaims its resources. This involves unmapping the memory that was mapped by . Once this is peformed, the enclave can no longer be accessed."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="enclave"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The instance of the enclave to be terminated."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                chars="Returns OE_OK on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=81
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_a5a1d79498b0488d2aea62b0596bcdd4d_1a5a1d79498b0488d2aea62b0596bcdd4d
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_CallEnclave"
                }
                argsstring
                {
                    chars="(OE_Enclave *enclave, const char *func, void *args)"
                }
                name
                {
                    chars="OE_CallEnclave"
                }
                param
                {
                    type
                    {
                        chars="OE_Enclave *"
                    }
                    declname
                    {
                        chars="enclave"
                    }
                }
                param
                {
                    type
                    {
                        chars="const char *"
                    }
                    declname
                    {
                        chars="func"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="args"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Perform a high-level enclave function call (ECALL)."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="func"
                        }
                        verbatim
                        {
                            chars="OE_ECALL void (*)(void* args);"
                        }
                        chars="Call the enclave function whose name is given by the  parameter. The enclave must define a corresponding function with the following prototype."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="The meaning of the  parameter is defined by the implementer of the function and may be null."
                    }
                    para
                    {
                        bold
                        {
                            chars="OE_FUNC_CALL_ENCLAVE"
                        }
                        chars="This function is implemented using the low-level OE_OCall() interface where the function number is given by the  constant."
                    }
                    para
                    {
                        bold
                        {
                            chars="args"
                        }
                        chars="Note that the return value of this function only indicates the success of the call and not of the underlying function. The ECALL implementation must define its own error reporting scheme based on ."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="func"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The name of the enclave function that will be called."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="args"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The arguments to be passed to the enclave function."
                                    }
                                }
                            }
                        }
                        simplesect
                        {
                            kind=return
                            para
                            {
                                bold
                                {
                                    chars="OE_OK"
                                }
                                chars="This function return  on success."
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=109
                    column=1
                }
            }
            memberdef
            {
                kind=function
                id=host_8h_a0d2e9102af51fc63e9895612310392f5_1a0d2e9102af51fc63e9895612310392f5
                prot=public
                static=no
                const=no
                explicit=no
                inline=no
                virt=non-virtual
                type
                {
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                }
                definition
                {
                    chars="OE_Result OE_GetQuote"
                }
                argsstring
                {
                    chars="(const void *report, size_t reportSize, void *quote, size_t *quoteSize)"
                }
                name
                {
                    chars="OE_GetQuote"
                }
                param
                {
                    type
                    {
                        chars="const void *"
                    }
                    declname
                    {
                        chars="report"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t"
                    }
                    declname
                    {
                        chars="reportSize"
                    }
                }
                param
                {
                    type
                    {
                        chars="void *"
                    }
                    declname
                    {
                        chars="quote"
                    }
                }
                param
                {
                    type
                    {
                        chars="size_t *"
                    }
                    declname
                    {
                        chars="quoteSize"
                    }
                }
                briefdescription
                {
                    para
                    {
                        chars="Gets a quote from the Intel(R) quote enclave."
                    }
                }
                detaileddescription
                {
                    para
                    {
                        bold
                        {
                            chars="report"
                        }
                        ref
                        {
                            refid=enclave_8h_ab4b70d7070180862df4e92b590fc941d_1ab4b70d7070180862df4e92b590fc941d
                            kindref=member
                            chars="OE_GetReportForRemoteAttestation()"
                        }
                        chars="This function obtains a quote for the  parameter. Enclaves create reports by executing the ENCLU.EREPORT instruction. One way an enclave may create a report is by calling ."
                    }
                    para
                    {
                        chars="This function obtains a quote from the AESM service, which forwards the request to the Intel(R) quote enclave."
                    }
                    para
                    {
                        emphasis
                        {
                            chars="quoteSize"
                        }
                        chars="If the  parameter is too small, this function resets it to the required size and returns OE_BUFFER_TOO_SMALL."
                    }
                    para
                    {
                        parameterlist
                        {
                            kind=param
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="report"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The report for which the quote is desired."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="reportSize"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="report"
                                        }
                                        chars="The size of the  buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="quote"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The quote is written to this buffer."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="quoteSize"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="quote"
                                        }
                                        chars="The size of the  buffer."
                                    }
                                }
                            }
                        }
                        parameterlist
                        {
                            kind=retval
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_OK"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The quote was successfully obtained."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_INVALID_PARAMETER"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="At least one parameter is invalid."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_BUFFER_TOO_SMALL"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        bold
                                        {
                                            chars="quote"
                                        }
                                        chars="The  buffer is too small."
                                    }
                                }
                            }
                            parameteritem
                            {
                                parameternamelist
                                {
                                    parametername
                                    {
                                        chars="OE_SERVICE_UNAVAILABLE"
                                    }
                                }
                                parameterdescription
                                {
                                    para
                                    {
                                        chars="The AESM service is unavailable."
                                    }
                                }
                            }
                        }
                    }
                }
                inbodydescription
                {
                }
                location
                {
                    file=/root/openenclave/include/openenclave/host.h
                    line=138
                    column=1
                }
            }
        }
        briefdescription
        {
            para
            {
                chars="This file defines the programming interface for developing host applications."
            }
        }
        detaileddescription
        {
        }
        programlisting
        {
            codeline
            {
                lineno=1
            }
            codeline
            {
                lineno=7
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifndef_OE_HOST_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=8
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#define_OE_HOST_H"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=9
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=10
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stddef.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=11
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<string.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=12
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdlib.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=13
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdio.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=14
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdint.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=15
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include<stdarg.h>"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=16
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"defs.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=17
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"types.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=18
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    ref
                    {
                        refid=result_8h
                        kindref=compound
                        chars="result.h"
                    }
                    chars="#include"""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=19
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    ref
                    {
                        refid=thread_8h
                        kindref=compound
                        chars="thread.h"
                    }
                    chars="#include"""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=20
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#include"bits/sha.h""
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=21
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=22
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_BEGIN"
                }
            }
            codeline
            {
                lineno=23
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=24
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#ifdef__cplusplus"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=25
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_OCALLOE_EXTERNCOE_EXPORT"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=26
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#else"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=27
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_OCALLOE_EXPORT"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=28
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    chars="#endif"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=29
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=30
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=keyword
                    chars="typedef"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    sp
                    {
                    }
                    chars="struct"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="_OE_EnclaveOE_Enclave;"
                }
            }
            codeline
            {
                lineno=31
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=32
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_FLAG_DEBUG1"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=33
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="#defineOE_FLAG_SIMULATE2"
                }
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=34
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=64
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=host_8h_a598cc1d7a051a13f5ff4ba6160ccbd82_1a598cc1d7a051a13f5ff4ba6160ccbd82
                        kindref=member
                        chars="OE_CreateEnclave"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=65
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*path,"
                }
            }
            codeline
            {
                lineno=66
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="uint32_tflags,"
                }
            }
            codeline
            {
                lineno=67
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave**enclave);"
                }
            }
            codeline
            {
                lineno=68
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=81
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=host_8h_a20654d7b450c042ac7b256893b287cbe_1a20654d7b450c042ac7b256893b287cbe
                        kindref=member
                        chars="OE_TerminateEnclave"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=82
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave*enclave);"
                }
            }
            codeline
            {
                lineno=83
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=109
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=host_8h_a5a1d79498b0488d2aea62b0596bcdd4d_1a5a1d79498b0488d2aea62b0596bcdd4d
                        kindref=member
                        chars="OE_CallEnclave"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=110
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="OE_Enclave*enclave,"
                }
            }
            codeline
            {
                lineno=111
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="char"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*func,"
                }
            }
            codeline
            {
                lineno=112
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*args);"
                }
            }
            codeline
            {
                lineno=113
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=138
                highlight
                {
                    class=normal
                    ref
                    {
                        refid=result_8h_1ac2eb4734754498f9bdb08d6b2573ba8b
                        kindref=member
                        chars="OE_Result"
                    }
                    sp
                    {
                    }
                    ref
                    {
                        refid=host_8h_a0d2e9102af51fc63e9895612310392f5_1a0d2e9102af51fc63e9895612310392f5
                        kindref=member
                        chars="OE_GetQuote"
                    }
                    chars="("
                }
            }
            codeline
            {
                lineno=139
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keyword
                    chars="const"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*report,"
                }
            }
            codeline
            {
                lineno=140
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="reportSize,"
                }
            }
            codeline
            {
                lineno=141
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="void"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*quote,"
                }
            }
            codeline
            {
                lineno=142
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                    sp
                    {
                    }
                }
                highlight
                {
                    class=keywordtype
                    chars="size_t"
                }
                highlight
                {
                    class=normal
                    sp
                    {
                    }
                    chars="*quoteSize);"
                }
            }
            codeline
            {
                lineno=143
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=144
                highlight
                {
                    class=normal
                    chars="OE_EXTERNC_END"
                }
            }
            codeline
            {
                lineno=145
                highlight
                {
                    class=normal
                }
            }
            codeline
            {
                lineno=146
                highlight
                {
                    class=normal
                }
                highlight
                {
                    class=preprocessor
                    sp
                    {
                    }
                    chars="#endif"
                }
                highlight
                {
                    class=comment
                    sp
                    {
                    }
                    sp
                    {
                    }
                    chars="/*_OE_HOST_H*/"
                }
                highlight
                {
                    class=preprocessor
                }
            }
        }
        location
        {
            file=/root/openenclave/include/openenclave/host.h
        }
    }
}
