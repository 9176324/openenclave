/* Copyright (c) Microsoft Corporation. All rights reserved. */
/* Licensed under the MIT License. */
enclave {
    /* For SGX, we need ocalls to support fopen etc. */
    from "sgx_tprotected_fs.edl" import *;
    include "openenclave/bits/oebuffer.h"

    struct ocall_struct_stat64i32 {
        unsigned int   _st_dev;
        unsigned short _st_ino;
        unsigned short _st_mode;
        short          _st_nlink;
        short          _st_uid;
        short          _st_gid;
        unsigned int   _st_rdev;
        long           _st_size;
        uint64_t       _st_atime;
        uint64_t       _st_mtime;
        uint64_t       _st_ctime;
    };

    struct GetUntrustedFileSize_Result {
        unsigned int status;
        int32_t fileSize;
    };

    struct GetUntrustedFileContent_Result {
        unsigned int status;
        char content[4096];
    };

    struct stat64i32_Result {
        unsigned int status;
        struct ocall_struct_stat64i32 buffer;
    };
    
    trusted {
    };

    untrusted {
        // File APIs

        [cdecl] int ocall_mkdir(oe_buffer256 dirname);
        
        [cdecl] GetUntrustedFileSize_Result ocall_GetUntrustedFileSize(
            oe_buffer256 filename);

        [cdecl] GetUntrustedFileContent_Result ocall_GetUntrustedFileContent(
            oe_buffer256 location,
            size_t len);

        [cdecl] unsigned int ocall_ExportFile(
            oe_buffer256 filename,
            unsigned int appendToExistingFile,
            oe_buffer4096 content,
            size_t len);

        [cdecl] stat64i32_Result ocall_stat64i32(oe_buffer256 path);

        [cdecl] int ocallTcpsFileDelete(oe_buffer256 filename);
    };
};
