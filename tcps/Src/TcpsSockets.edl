/* Copyright (c) Microsoft Corporation. All rights reserved. */
/* Licensed under the MIT License. */
enclave {
    include "oesocket.h"

    struct accept_Result {
        oe_socket_error_t error;
        void* hNewSocket;
        int addrlen;
        char addr[256];
    };

    /* Serialized buffer of addrinfo structures. */
    struct addrinfo_Buffer {
        int ai_flags;
        int ai_family;
        int ai_socktype;
        int ai_protocol;
        int ai_addrlen;
        buffer256 ai_canonname;
        buffer256 ai_addr;
    };

    struct getaddrinfo_Result {
        oe_socket_error_t error;
        int addressCount;
        void* hMessage; /* Handle to pass to TcpsImportBuffer() */
    };

    struct gethostname_Result {
        oe_socket_error_t error;
        char name[256];
    };

    struct getnameinfo_Result {
        oe_socket_error_t error;
        buffer256 host;
        buffer256 serv;
    };

    struct GetSockName_Result {
        oe_socket_error_t error;
        int addrlen;
        char addr[256];
    };

    struct getsockopt_Result {
        oe_socket_error_t error;
        char buffer[256];
        int len;
    };

    struct ioctlsocket_Result {
        oe_socket_error_t error;
        unsigned int outputValue;
    };

    struct oe_timeval {
        int tv_sec;
        int tv_usec;
    };

    struct oe_fd_set_internal {
        unsigned int fd_count;
        void* fd_array[64];
    };

    struct select_Result {
        oe_socket_error_t error;
        int socketsSet;
        oe_fd_set_internal readFds;
        oe_fd_set_internal writeFds;
        oe_fd_set_internal exceptFds;
    };

    struct send_Result {
        oe_socket_error_t error;
        int bytesSent;
    };

    struct socket_Result {
        oe_socket_error_t error;
        void* hSocket;
    };

    struct recv_Result {
        oe_socket_error_t error;
        int bytesReceived;
        void* hMessage; /* Handle to pass to TcpsImportBuffer() */
    };

    trusted {
    };

    untrusted {
        [cdecl] accept_Result ocall_accept(
            [user_check] void* a_hSocket,
            int a_nAddrLen);

        [cdecl] oe_socket_error_t ocall_bind(
            [user_check] void* a_hSocket,
            buffer256 a_Name,
            int a_nNameLen);

        [cdecl] oe_socket_error_t ocall_closesocket(
            [user_check] void* a_hSocket);

        [cdecl] oe_socket_error_t ocall_connect(
            [user_check] void* a_hSocket,
            buffer256 a_Name,
            int a_nNameLen);

        [cdecl] getaddrinfo_Result ocall_getaddrinfo(
            buffer256 a_NodeName,
            buffer256 a_ServiceName,
            int a_Flags,
            int a_Family,
            int a_SockType,
            int a_Protocol);

        [cdecl] gethostname_Result ocall_gethostname(void);

        [cdecl] getnameinfo_Result ocall_getnameinfo(
            buffer256 a_Addr,
            int a_AddrLen,
            int a_Flags);

        [cdecl] GetSockName_Result ocall_getpeername(
            [user_check] void* a_hSocket,
            int a_nNameLen);

        [cdecl] GetSockName_Result ocall_getsockname(
            [user_check] void* a_hSocket,
            int a_nNameLen);

        [cdecl] getsockopt_Result ocall_getsockopt(
            [user_check] void* a_hSocket,
            int a_nLevel,
            int a_nOptName,
            int a_nOptLen);

        [cdecl] ioctlsocket_Result ocall_ioctlsocket(
            [user_check] void* a_hSocket,
            int a_nCommand,
            unsigned int a_uInputValue);

        [cdecl] oe_socket_error_t ocall_listen(
            [user_check] void* a_hSocket,
            int a_nMaxConnections);

        [cdecl] recv_Result ocall_recv(
            [user_check] void* a_hSocket,
            int a_nBufferSize,
            int a_Flags);

        [cdecl] select_Result ocall_select(
            int a_nFds,
            oe_fd_set_internal a_ReadFds,
            oe_fd_set_internal a_WriteFds,
            oe_fd_set_internal a_ExceptFds,
            oe_timeval a_Timeval);

        [cdecl] send_Result ocall_send(
            [user_check] void* a_hSocket,
            [user_check] void* a_hMessage,
            int a_Flags);

        [cdecl] oe_socket_error_t ocall_setsockopt(
            [user_check] void* a_hSocket,
            int a_nLevel,
            int a_nOptName,
            buffer256 a_OptVal,
            int a_nOptLen);

        [cdecl] oe_socket_error_t ocall_shutdown(
            [user_check] void* a_hSocket,
            oe_shutdown_how_t a_How);

        [cdecl] socket_Result ocall_socket(
            oe_socket_address_family_t a_AddressFamily,
            oe_socket_type_t a_Type,
            int a_Protocol);

        [cdecl] oe_socket_error_t ocall_WSACleanup(void);

        [cdecl] oe_socket_error_t ocall_WSAStartup(void);
    };
};
