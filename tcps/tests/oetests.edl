/* Copyright (c) Microsoft Corporation. All rights reserved. */
/* Licensed under the MIT License. */
enclave {
    from "openenclave/socket.edl" import *;
	include "openenclave/bits/oebuffer.h"

    trusted {
        /* define ECALLs here. */
        public void ecall_DoNothing();
        public Tcps_StatusCode ecall_ReturnOk();
        public int ecall_PrintString([in, string] char* fmt, [in, string] char* arg);
        public int ecall_BufferToInt([out] int* output, [in, size=size] void* buffer, size_t size);
        public Tcps_StatusCode ecall_TestOcall();
        public void ecall_CopyInt([in] int* input, [out] int* output);
        public oe_CreateBuffer_Result ecall_CreateReeBufferFromTeeBuffer([user_check] void* hTeeBuffer);
        public Tcps_StatusCode ecall_RunClient([in, string] char* server, [in, string] char* port);
        public Tcps_StatusCode ecall_StartServer([in, string] char* port);
        public Tcps_StatusCode ecall_FinishServer();
        public Tcps_StatusCode ecall_TestSgxIsWithinEnclave([user_check] void* outside, int size);
        public Tcps_StatusCode ecall_TestSgxIsOutsideEnclave([user_check] void* outside, int size);
        public Tcps_StatusCode ecall_TestOEIsWithinEnclave([user_check] void* outside, int size);
        public Tcps_StatusCode ecall_TestOEIsOutsideEnclave([user_check] void* outside, int size);
        public Tcps_StatusCode ecall_TestOERandom();
        public Tcps_StatusCode ecall_TestOEGetReportV1(uint32_t flags);
        public Tcps_StatusCode ecall_TestOEGetReportV2(uint32_t flags);
        public Tcps_StatusCode ecall_TestOEGetTargetInfoV1(uint32_t flags);
        public Tcps_StatusCode ecall_TestOEGetTargetInfoV2(uint32_t flags);
        public Tcps_StatusCode ecall_TestOEExceptions();
        public Tcps_StatusCode ecall_TestOEGetSealKeyV1(int policy);
        public Tcps_StatusCode ecall_TestOEGetSealKeyV2(int policy);
        public Tcps_StatusCode ecall_TestOEGetPublicKey(int policy);
        public Tcps_StatusCode ecall_TestOEGetPrivateKey(int policy);
        public void* ecall_OEHostMalloc(int size);
        public void* ecall_OEHostCalloc(int nmemb, int size);
        public void* ecall_OEHostRealloc([user_check] void* ptr, int size);
        public char* ecall_OEHostStrndup([in, string] char* str, int size);
        public void ecall_OEHostFree([user_check] void* ptr);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_DoNothing();
        void ocall_PrintString([in, string] char* fmt, [in, string] char* arg);
        int ocall_BufferToInt([in, size=size] void* buffer, size_t size);
        int ocall_ReturnInputArgument(int input);
    };
};
