// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

#include <openenclave/enclave.h>
#include <openenclave/internal/tests.h>
#include <stdio.h>
#include <stdlib.h>
#include <thread>
#include <mutex>
#include "../args.h"

static oe_mutex_t mutex1 = OE_MUTEX_INITIALIZER;
static oe_mutex_t mutex2 = OE_MUTEX_INITIALIZER;

OE_ECALL void Test(void* args_)
{
    TestArgs* args = (TestArgs*)args_;

    if (!args)
        return;
}

OE_ECALL void TestMutex(void* args_)
{
    TestMutexArgs* args = (TestMutexArgs*)args_;
    std::mutex mtx; // Mutex for critical section

    mtx.lock();
    for (int i=0; i<n; ++i)
    {
       std::cout << c;
    }
    std::cout << '\n';
    args->count++;
    mtx.unlock();

/*
    OE_TEST(oe_mutex_lock(&mutex1) == 0);
    OE_TEST(oe_mutex_lock(&mutex1) == 0);
    args->count1++;
    OE_TEST(oe_mutex_lock(&mutex2) == 0);
    OE_TEST(oe_mutex_lock(&mutex2) == 0);
    args->count2++;
    OE_TEST(oe_mutex_unlock(&mutex1) == 0);
    OE_TEST(oe_mutex_unlock(&mutex1) == 0);
    OE_TEST(oe_mutex_unlock(&mutex2) == 0);
    OE_TEST(oe_mutex_unlock(&mutex2) == 0);
*/

    oe_host_printf("TestMutex: %lld\n", OE_LLU(oe_thread_self()));
}

